{"version":3,"sources":["../../src/utilities/to-svg.js"],"names":["toSVG","network","options","defaultOptions","line","width","color","inputs","label","outputs","hidden","fontSize","radius","height","size","inputSize","outputSize","hiddenLayers","sizes","Object","assign","length","svg","sh","forEach","neuronsNu","i","sv","Array","_","j","sv_1","k"],"mappings":"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","file":"to-svg.js","sourcesContent":["\r\nexport default function toSVG(network, options) {\r\n    //default values\r\n    const defaultOptions = {\r\n        line:{\r\n            width: '0.5',\r\n            color: 'black'\r\n        },\r\n        inputs:{\r\n            color:'rgba(0, 128, 0, 0.5)',\r\n            label: false\r\n        },\r\n        outputs:{\r\n            color:'rgba(100, 149, 237, 0.5)'\r\n        },\r\n        hidden:{\r\n            color:'rgba(255, 127, 80, 0.5)'\r\n        },\r\n        fontSize: '14px',\r\n        radius: '8',\r\n        width: '400',\r\n        height: '250'\r\n    };\r\n    // Get network size array if network is created from the constructor\r\n    let size =  typeof(network.inputSize) == 'number' && typeof(network.outputSize) == 'number' && network.inputSize > 0 && network.outputSize> 0 ? [network.inputSize, ...network.hiddenLayers, network.outputSize]:false;\r\n    // Get network size array if network is formed from a json object with fromJSON(json) method\r\n    if(!size) size = network.sizes;\r\n    \r\n    options = Object.assign(defaultOptions, options);      \r\n    options.inputs.label = options.inputs.label.length == network.inputSize ? options.inputs.label : false;        \r\n    if(size){\r\n        let svg = '<svg  xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"'+options.width+'\" height=\"'+options.height+'\">';\r\n        const sh = options.width/size.length;\r\n        size.forEach((neuronsNu,i)=>{\r\n            const sv = options.height/neuronsNu;\r\n            [...Array(neuronsNu)].forEach((_,j)=>{\r\n                if (i==0){\r\n                    svg += '<rect x=\"'+(sh/2-options.radius)+'\" y=\"' + (sv/2 + j*sv- options.radius) + '\" width=\"'+(2*options.radius)+\r\n                        '\" height=\"'+(2* options.radius)+'\" stroke=\"black\" stroke-width=\"1\" fill=\"'+options.inputs.color+'\" />';\r\n                    svg += '<line x1=\"'+(sh/4)+'\" y1=\"' + (sv/2 + j*sv) + '\" x2=\"'+(sh/2-options.radius)+ '\" y2=\"' + (sv/2 + j*sv) + \r\n                        '\" style=\"stroke:'+options.line.color+';stroke-width:'+options.line.width+'\" />';\r\n                    if(options.inputs.label){\r\n                        svg += '<text x=\"'+(sh/8)+'\" y=\"' + (sv/2 + j*sv -5 ) + '\" fill=\"black\" font-size= \"'+options.fontSize+'\">'\r\n                        +options.inputs.label[j]+'</text>';\r\n                    }                       \r\n                }else {\r\n                    const sv_1 = options.height/size[i-1];\r\n                    if(i==size.length-1){  \r\n                        svg += '<circle cx=\"'+(sh/2+i*sh)+'\" cy=\"' + (sv/2 + j*sv) + '\" r=\"'+options.radius+'\" stroke=\"black\" stroke-width=\"1\" fill=\"'+\r\n                        options.outputs.color + '\" />';\r\n                        svg += '<line x1=\"'+(sh/2+i*sh + options.radius)+'\" y1=\"' + (sv/2 + j*sv ) + '\" x2=\"'+(sh/2+i*sh +sh/4)+'\" y2=\"' + (sv/2 + j*sv ) +\r\n                            '\" style=\"stroke:'+options.line.color+';stroke-width:'+options.line.width+'\" />';\r\n                    }else{\r\n                        svg += '<circle cx=\"'+(sh/2+i*sh)+'\" cy=\"' + (sv/2 + j*sv) + '\" r=\"'+options.radius+'\" stroke=\"black\" stroke-width=\"1\" fill=\"'+\r\n                        options.hidden.color + '\" />';\r\n                    }\r\n                    for (let k=0;k<size[i-1];k++){\r\n                        svg += '<line x1=\"'+(sh/2+(i-1)*sh+options.radius)+'\" y1=\"' + (sv_1/2 + k*sv_1) + '\" x2=\"'+(sh/2+i*sh - options.radius)+'\" y2=\"' + (sv/2 + j*sv ) +\r\n                        '\" style=\"stroke:'+ options.line.color+';stroke-width:'+options.line.width+'\" />';\r\n                    }\r\n                }\r\n            });\r\n        });        \r\n        svg += '</svg>';\r\n        return svg;\r\n    }else{\r\n        return false;\r\n    }\r\n}"]}